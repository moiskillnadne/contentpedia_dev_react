// eslint-disable react/jsx-props-no-spreading
// Dependencies
import '@/components/input/style.less'
import React, { FC, useState } from 'react'
import { Field } from 'react-final-form'
import { SubscriptionSettigns } from '@/types/common'
import c from 'clsx'

// Components
import Small from '@/components/input/small'

// Shared
import * as utils from '@/components/form/utils'

type InputProps = {
  type: 'text' | 'number' | 'email' | 'password'
  name: string
  styleCss?: string
  placeholder?: string
  subs?: SubscriptionSettigns
  label?: string
  small?: string
  isValidation: boolean
}

const Input: FC<InputProps> = (props): JSX.Element => {
  const { type, name, styleCss, placeholder, subs, label, small, isValidation } = props
  const [previewLink, setPreviewLink] = useState<string>('')

  const autoGeneratedLinkDeps = {
    previewLink,
    name,
  }

  return (
    <Field<string>
      type={type}
      name={name}
      subscription={subs || utils.defaultSubs}
      placeholder={placeholder || ''}
      validate={isValidation ? utils.requiredValidation : undefined}
    >
      {({ input, meta }) => {
        return (
          <div className="form-group">
            <label htmlFor={input.name} className="first-letter-cap">
              {label}
            </label>
            <input
              {...input}
              className={c(styleCss, 'form-control', meta.error && meta.touched && 'invalid-input')}
              placeholder={placeholder}
              onBlur={() => getPreviewLink(input.value).then((link) => setPreviewLink(link))}
            />

            {meta.error && meta.touched ? <small className="form-text text-danger">{meta.error}</small> : <></>}

            <Small small={small} />
            <Small autoGeneratedLinkDeps={autoGeneratedLinkDeps} />
          </div>
        )
      }}
    </Field>
  )
}

async function getPreviewLink(value: string): Promise<string> {
  const result = await fetch('/api/v1/videoDetails/getPreviewLink', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      videoLink: value,
    }),
  })
  const link = await result.json()
  return link
}

export default Input
